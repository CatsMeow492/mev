"use strict";(()=>{var e={};e.id=989,e.ids=[989],e.modules={399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},4880:(e,t,a)=>{a.r(t),a.d(t,{originalPathname:()=>w,patchFetch:()=>C,requestAsyncStorage:()=>f,routeModule:()=>y,serverHooks:()=>T,staticGenerationAsyncStorage:()=>E});var s={};a.r(s),a.d(s,{GET:()=>i,HEAD:()=>g});var n=a(9303),r=a(8716),o=a(670),l=a(7070);async function i(e){try{let e=new Date().toISOString(),t=Date.now(),a=(await Promise.allSettled([u(),c(),h(),d(),p(),m()])).map((e,t)=>{let a=["main-api","strategy","replay","fork","database","redis"][t];return"fulfilled"===e.status?{service:a,status:e.value.status,responseTime:e.value.responseTime,details:e.value.details}:{service:a,status:"error",responseTime:null,error:e.reason?.message||"Unknown error"}}),s=a.filter(e=>"healthy"===e.status).length,n=a.length,r=s===n?"healthy":s>n/2?"degraded":"unhealthy",o={timestamp:e,overallStatus:r,responseTime:Date.now()-t,servicesHealthy:s,totalServices:n,healthPercentage:Math.round(s/n*100),services:a,deployment:{environment:"development",version:process.env.VERCEL_GIT_COMMIT_SHA?.slice(0,7)||"dev",region:process.env.VERCEL_REGION||"local",vercelUrl:process.env.VERCEL_URL,customDomain:process.env.NEXT_PUBLIC_DOMAIN}};return"unhealthy"===r&&await v(o),l.NextResponse.json(o,{status:"healthy"===r?200:"degraded"===r?206:503,headers:{"Cache-Control":"no-cache, no-store, must-revalidate","Content-Type":"application/json"}})}catch(e){return console.error("Health check failed:",e),l.NextResponse.json({timestamp:new Date().toISOString(),overallStatus:"error",error:e instanceof Error?e.message:"Health check failed",deployment:{environment:"development",version:process.env.VERCEL_GIT_COMMIT_SHA?.slice(0,7)||"dev"}},{status:503,headers:{"Cache-Control":"no-cache, no-store, must-revalidate"}})}}async function u(){let e="http://localhost:8080";if(!e)return{status:"not-configured",responseTime:null};let t=Date.now();try{let a=await fetch(`${e}/health`,{method:"GET",signal:AbortSignal.timeout(5e3)}),s=Date.now()-t,n=await a.json();return{status:a.ok?"healthy":"unhealthy",responseTime:s,details:{statusCode:a.status,version:n.version,uptime:n.uptime}}}catch(e){return{status:"unreachable",responseTime:Date.now()-t,details:{error:e instanceof Error?e.message:"Unknown error"}}}}async function c(){let e=process.env.NEXT_PUBLIC_STRATEGY_SERVICE_URL;if(!e)return{status:"not-configured",responseTime:null};let t=Date.now();try{let a=await fetch(`${e}/health`,{method:"GET",signal:AbortSignal.timeout(5e3)}),s=Date.now()-t;return{status:a.ok?"healthy":"unhealthy",responseTime:s,details:{statusCode:a.status}}}catch(e){return{status:"unreachable",responseTime:Date.now()-t,details:{error:e instanceof Error?e.message:"Unknown error"}}}}async function h(){let e=process.env.NEXT_PUBLIC_REPLAY_SERVICE_URL;if(!e)return{status:"not-configured",responseTime:null};let t=Date.now();try{let a=await fetch(`${e}/health`,{method:"GET",signal:AbortSignal.timeout(5e3)}),s=Date.now()-t;return{status:a.ok?"healthy":"unhealthy",responseTime:s,details:{statusCode:a.status}}}catch(e){return{status:"unreachable",responseTime:Date.now()-t,details:{error:e instanceof Error?e.message:"Unknown error"}}}}async function d(){let e=process.env.NEXT_PUBLIC_FORK_SERVICE_URL;if(!e)return{status:"optional",responseTime:null};let t=Date.now();try{let a=await fetch(`${e}/health`,{method:"GET",signal:AbortSignal.timeout(5e3)}),s=Date.now()-t;return{status:a.ok?"healthy":"unhealthy",responseTime:s,details:{statusCode:a.status}}}catch(e){return{status:"unreachable",responseTime:Date.now()-t,details:{error:e instanceof Error?e.message:"Unknown error"}}}}async function p(){return process.env.DATABASE_URL?{status:"configured",responseTime:0,details:{note:"Database check delegated to API"}}:{status:"not-configured",responseTime:null}}async function m(){return process.env.REDIS_URL?{status:"configured",responseTime:0,details:{note:"Redis check delegated to API"}}:{status:"not-configured",responseTime:null}}async function v(e){try{let t=process.env.SLACK_WEBHOOK_URL;t&&await fetch(t,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({text:`ðŸš¨ MEV Engine Health Alert`,attachments:[{color:"danger",fields:[{title:"Overall Status",value:e.overallStatus,short:!0},{title:"Healthy Services",value:`${e.servicesHealthy}/${e.totalServices}`,short:!0},{title:"Environment",value:e.deployment.environment,short:!0},{title:"Timestamp",value:e.timestamp,short:!0}]}]}),signal:AbortSignal.timeout(5e3)})}catch(e){console.error("Failed to send health alert:",e)}}async function g(e){return new Response(null,{status:200,headers:{"Cache-Control":"no-cache, no-store, must-revalidate"}})}let y=new n.AppRouteRouteModule({definition:{kind:r.x.APP_ROUTE,page:"/api/health-check/route",pathname:"/api/health-check",filename:"route",bundlePath:"app/api/health-check/route"},resolvedPagePath:"/Users/taylormohney/Documents/GitHub/MEVDemo/web/dashboard/src/app/api/health-check/route.ts",nextConfigOutput:"standalone",userland:s}),{requestAsyncStorage:f,staticGenerationAsyncStorage:E,serverHooks:T}=y,w="/api/health-check/route";function C(){return(0,o.patchFetch)({serverHooks:T,staticGenerationAsyncStorage:E})}}};var t=require("../../../webpack-runtime.js");t.C(e);var a=e=>t(t.s=e),s=t.X(0,[276,972],()=>a(4880));module.exports=s})();